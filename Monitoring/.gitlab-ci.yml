image: node:20

services:
  - name: docker:dind
    alias: docker

stages:
  - build
  - trivy-scan
  - test
  - deploy

variables:
  MYSQL_DATABASE: blogdb
  MYSQL_ROOT_PASSWORD: root
  MYSQL_USER: myuser
  MYSQL_PASSWORD: admin1234
  DOCKER_BUILDKIT: 1
  TRIVY_DB_REPO: "ghcr.io/aquasec/trivy-db"

before_script:
  - cd backend-node
  - npm install

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - |
      docker build \
        --cache-from $CI_REGISTRY_IMAGE/blog-front:latest \
        --tag $CI_REGISTRY_IMAGE/blog-front:$CI_COMMIT_SHA \
        --tag $CI_REGISTRY_IMAGE/blog-front:latest \
        -f blog/Dockerfile ./blog
    - |
      docker build \
        --cache-from $CI_REGISTRY_IMAGE/blog-backend:latest \
        --tag $CI_REGISTRY_IMAGE/blog-backend:$CI_COMMIT_SHA \
        --tag $CI_REGISTRY_IMAGE/blog-backend:latest \
        -f backend-node/Dockerfile ./backend-node
    - docker push $CI_REGISTRY_IMAGE/blog-front:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/blog-front:latest
    - docker push $CI_REGISTRY_IMAGE/blog-backend:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/blog-backend:latest

trivy_scan:
  stage: trivy-scan
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - sleep 60;
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker run --rm aquasec/trivy:latest image $CI_REGISTRY_IMAGE/blog-front:$CI_COMMIT_SHA
    - docker run --rm aquasec/trivy:latest image $CI_REGISTRY_IMAGE/blog-backend:$CI_COMMIT_SHA
  only:
    - main

test:
  stage: test
  script:
    - docker-compose up -d
    - >
      until docker exec <container_name> mysqladmin ping --silent; do
        echo "Waiting for MySQL to be ready...";
        sleep 5;
      done
    - docker-compose exec backend npm test
    - docker-compose down
  only:
    - main
    - merge_requests

deploy:
  stage: deploy
  script:
    - docker-compose up -d
  only:
    - main

after_script:
  - docker-compose down || true
  - docker system prune -f || true
